@model List<PRJ_FINAL_MP09_MP03.Models.TopTracks.Track>
@{
    ViewData["Title"] = "Top Tracks del Artista";
}

@{
    Layout = null;
}


<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Dashboard Musical</title>

    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <!-- Estilo personalizado -->
    <link href="~/css/Track.css" rel="stylesheet" />
</head>
<body>


    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <div class="container-fluid">
    <a class="navbar-brand" asp-controller="Music" asp-action="Dashboard">üé∂ MusicApp</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
      aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav me-auto">
        <li class="nav-item">
          <a class="nav-link" asp-controller="Music" asp-action="Trending">Trending</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" asp-controller="Music" asp-action="Dashboard">Dashboard</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" asp-controller="Music" asp-action="Playlist">Playlist</a>
        </li>

        <li class="nav-item"></li>
          <a class="nav-link" asp-controller="Music" asp-action="Lyrics">Lyrics</a>
        </li>
        
      </ul>
      <ul class="navbar-nav">
        <li class="nav-item">
          <a class="nav-link" asp-controller="Account" asp-action="Profile">Profile</a>
        </li>
        <li class="nav-item">
          <a href="#" id="logout-link" class="nav-link text-danger">Sign Out</a>
        </li>
      </ul>
    </div>
  </div>
</nav>

  <!-- Fondo y gradientes -->
  <div class="gradient-bg">
    <svg xmlns="http://www.w3.org/2000/svg">
      <defs>
        <filter id="goo">
          <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
          <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8" result="goo" />
          <feBlend in="SourceGraphic" in2="goo" />
        </filter>
      </defs>
    </svg>
    <div class="gradients-container">
      <div class="g1"></div>
      <div class="g2"></div>
      <div class="g3"></div>
      <div class="g4"></div>
      <div class="g5"></div>
      <div class="interactive"></div>
    </div>
  </div>

<div class="container mt-5">

    
    <div class="search-container text-center">
        <h2 id="animated-title" class="stylish-title">Top Tracks de Artista</h2>
        <form method="post" class="search-form d-flex justify-content-center mt-3">
            <input type="text" name="nombreArtista" class="search-input form-control me-2" placeholder="Nombre del artista..." required />
            <button type="submit" class="search-button btn">Buscar</button>
        </form>
    </div>



    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger text-center mt-3">
            @TempData["Error"]
        </div>
    }

    <div id="defaultTracks" class="row mt-4">
        <!-- Aqu√≠ se mostrar√°n los tracks iniciales por JS -->
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="row mt-4">
            @foreach (var track in Model)
            {
                <div class="col-md-4 mb-3">
                    <div class="card h-100 shadow">
                        <img src="@track.album.images.FirstOrDefault()?.url" class="card-img-top" alt="@track.name" />
                        <div class="card-body">
                            <h5 class="card-title">@track.name</h5>
                            <p class="card-text"><strong>√Ålbum:</strong> @track.album.name</p>
                            <p class="card-text"><strong>Artista:</strong> @track.artists.FirstOrDefault()?.name</p>
                            <p class="card-text"><strong>ID del track:</strong> @track.id</p>
                            <a href="@track.external_urls.spotify" class="btn btn-success" target="_blank">Ver en Spotify</a>
                            <button class="btn btn-warning mt-2 btn-magic" onclick="toggleAudioPlayer('@track.id', this)">Descargar y Escuchar</button>
                            
                            <!-- Contenedor para los controles de audio (inicialmente oculto) -->
                            <div id="audio-controls-@track.id" class="mt-3 audio-controls-container" style="display: none;">
                                <audio id="audio-player-@track.id" controls class="audio-player w-100 mb-2"></audio>
                                <a id="download-link-@track.id" href="#" download class="btn btn-success w-100 download-link">
                                    <i class="fas fa-download"></i> Descargar Canci√≥n
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <div id="downloadResult" class="mt-5"></div>
</div>
<script>

        document.addEventListener("DOMContentLoaded", () => {
            const title = document.getElementById("animated-title");
            title.style.opacity = 0;
            title.style.transform = "translateY(-20px)";
            setTimeout(() => {
                title.style.transition = "opacity 0.8s ease, transform 0.8s ease";
                title.style.opacity = 1;
                title.style.transform = "translateY(0)";
            }, 200);
        });

        // Efecto de parpadeo sutil al pasar el rat√≥n
        const titleEl = document.getElementById("animated-title");
        titleEl.addEventListener("mouseenter", () => {
            titleEl.style.textShadow = "0 0 20px #10b981, 0 0 30px #3b82f6";
        });

        titleEl.addEventListener("mouseleave", () => {
            titleEl.style.textShadow = "0 0 10px rgba(16, 185, 129, 0.4)";
        });
        const apiKeys = {
            spotifyDownloader: [
                "79ad7b2a74msh70736922a4bd854p12b7c9jsn99ee9a5dd06a",
                "92ee7f73d5mshf2777cb8ac8cbc9p18e50djsna73500eba4db",
                "622aa9cf3cmsh8baca60ab3772fap1e44b2jsn5a0086315b7b",
                "389f895960msh342248cef8664f0p12deb1jsnc6d228373c17",
                "16f146f39dmshdf344c76a838f13p1586c8jsn47ebb9faa9ae"
            ],
            youtubeSearch: [
                "01ebc13505msh3f2cf221c53fe72p1e3e91jsn21aad4768c20",
                "790206facamsh2aeda91f17e7d18p1dfc32jsn6addc8bee1a4",
                "f2c58721b8msh6b9fa4d30ae981bp170029jsnd5aade5280fc",
                "b1bcdd8e59mshcd129be8cd3ff4ap16d55fjsn4dfb91f679cd",
                "62a0db5af9msh5559e5f0207b2aap11ab4ejsnd26fb8767368"
            ],
            youtubeMp3: [
                "eb0df988f5msh492b51b93e6038fp1b5863jsnbbb81f9112fa",
                "28eff6a5f8mshd33b9a458577a35p108d50jsn09b7316a27be",
                "6b7e7ad439msha8cf21a7b55abb2p1b6169jsn7e8a899a4926",
                "7bcb6f01a3msh81b64c51b900ecbp1ab8b0jsn5ae8db8192e4",
            ],
            SpotifyData: [
                "50825b5af8msh034a5de1512fd88p1d2a91jsnc71fedc9dcd6",
                "ea35466da5msh6580164a56156ccp1d0b8cjsn591bf4306a17",
                "1197a8e516msh581c4bbb853ef52p1eed09jsn9261f00d63d9",
                "c8f7fc78b8mshb37b1e741baa137p1aa1f1jsn13f68c47bb14",
                "1027cc1a88msh5bf573078f0992bp1a1587jsnf578b096ec38",
                "6f60c5c11cmsh56a91777ad667cep1c3442jsnbfa62e1dcd5e"
            ]
        };

        function getRandomKey(service) {
            const keys = apiKeys[service];
            return keys[Math.floor(Math.random() * keys.length)];
        }

        const container = document.getElementById("defaultTracks");
        const artistIds = [
            "7dGJo4pcD2V6oG8kP0tJRR", // Eminem
            "06HL4z0CvFAxyc27GXpf02", // Taylor Swift
            "1Xyo4u8uXC1ZmMpatF05PJ"  // The Weeknd
        ];

        const headers = {
            "x-rapidapi-key": getRandomKey("spotifyDownloader"),
            "x-rapidapi-host": "spotify-downloader9.p.rapidapi.com"
        };

        const fetchTopTracks = async (id) => {
            const url = `https://spotify-downloader9.p.rapidapi.com/artistTopTracks?id=${id}&country=US`;
            const response = await fetch(url, { headers });
            const data = await response.json();
            return data.data.tracks;
        };

        const renderTrack = (track) => {
            return `
                <div class="col-md-4 mb-3">
                    <div class="card h-100 shadow">
                        <img src="${track.album.images[0]?.url}" class="card-img-top" alt="${track.name}" />
                        <div class="card-body">
                            <h5 class="card-title">${track.name}</h5>
                            <p class="card-text"><strong>√Ålbum:</strong> ${track.album.name}</p>
                            <p class="card-text"><strong>Artista:</strong> ${track.artists[0]?.name}</p>
                            <p class="card-text"><strong>ID del track:</strong> ${track.id}</p>
                            <a href="${track.external_urls.spotify}" class="btn btn-success" target="_blank">Ver en Spotify</a>
                            <button class="btn btn-warning mt-2 btn-magic" onclick="toggleAudioPlayer('${track.id}', this)">Descargar y Escuchar</button>
                            
                            <!-- Contenedor para los controles de audio (inicialmente oculto) -->
                            <div id="audio-controls-${track.id}" class="mt-3 audio-container" style="display: none;">
                                <audio id="audio-player-${track.id}" controls class="custom-audio w-100 mb-2"></audio>
                                <a id="download-link-${track.id}" href="#" download class="btn btn-download w-100">
                                    <i class="fas fa-download"></i> Descargar Canci√≥n
                                </a>
                            </div>

                        </div>
                    </div>
                </div>
            `;
        };

        window.currentTrackList = [];

        const loadAllTracks = async () => {
            for (const id of artistIds) {
                const tracks = await fetchTopTracks(id);
                tracks.slice(0, 3).forEach(track => {
                    window.currentTrackList.push(track);
                    container.innerHTML += renderTrack(track);
                });
            }
        };
        @if (Model == null || !Model.Any())
        {
            <text>loadAllTracks();</text>
        }

        async function getUrlDescarga(TrackNombre){
        const youtubeOptions = {
                method: 'GET',
                headers: {
                    'x-rapidapi-key': getRandomKey("youtubeSearch"),
                    'x-rapidapi-host': 'youtube138.p.rapidapi.com'
                }
        };

        const youtubeMp3Options = {
            method: 'GET',
            headers: {
                'x-rapidapi-key': getRandomKey("youtubeSearch"),
                'x-rapidapi-host': 'youtube-mp36.p.rapidapi.com'
            }
        };

        const YoutubeVideoId = `https://youtube138.p.rapidapi.com/search/?q=${encodeURIComponent(TrackNombre)}&hl=en&gl=ES`;
        const youtubeResponse = await fetch(YoutubeVideoId, youtubeOptions);
        const youtubeResult = await youtubeResponse.json();
        const videoId = youtubeResult.contents?.[0]?.video?.videoId;
        const YoutubeMp3Url = `https://youtube-mp36.p.rapidapi.com/dl?id=${videoId}`;
        const youtubeResponseMp3 = await fetch(YoutubeMp3Url, youtubeMp3Options);
        const youtubeResultMp3 = await youtubeResponseMp3.json();
        const mp3UrlMp3Descarga = youtubeResultMp3.link;

        const resultado = {
            UrlDescarga: mp3UrlMp3Descarga,
            Title: TrackNombre
        }

        return resultado;
    }

    async function getUrlMuica(trackId) {
        const encodedTrackUrl = encodeURIComponent(`https://open.spotify.com/track/${trackId}`);
        const downloaderApiUrl = `https://spotify-downloader9.p.rapidapi.com/downloadSong?songId=${encodedTrackUrl}`;

        const downloaderOptions = {
                method: 'GET',
                headers: {
                    'x-rapidapi-key': getRandomKey("spotifyDownloader"),
                    'x-rapidapi-host': 'spotify-downloader9.p.rapidapi.com'
                }
        };
        const resultado = {
            UrlMusica: "",
            Title: "",
            UrlDescarga: "",
        }
        try {
            // Obtener el MP3
            const DownloadResponse = await fetch(downloaderApiUrl, downloaderOptions);
            const DownloadResult = await DownloadResponse.json();

            if (!DownloadResult.success || !DownloadResult.data?.downloadLink) {
                throw new Error("No se pudo obtener el MP3 desde la nueva API.");
            }

            const mp3Url = DownloadResult.data.downloadLink;

            resultado.UrlMusica = mp3Url;
            resultado.Title = DownloadResult.data.title;
            const mp3UrlDescarga = await getUrlDescarga(resultado.Title);
            resultado.UrlDescarga = mp3UrlDescarga.UrlDescarga;

            console.log("MP3 URL:", resultado.UrlMusica);
            console.log("MP3 Download URL:", resultado.UrlDescarga);
            console.log("MP3 Title:", resultado.Title);
            console.log("MP3 Download URL:", mp3UrlDescarga.UrlDescarga);
            return resultado;
        } catch (error) {
            console.error("Error al obtener el MP3:", error); 
            throw error;
        }
    }

    // Funci√≥n para mostrar/ocultar el reproductor en la misma card
    async function toggleAudioPlayer(trackId, buttonElement) {
        console.log("Track ID:", trackId);
        const audioControls = document.getElementById(`audio-controls-${trackId}`);
        const audioPlayer = document.getElementById(`audio-player-${trackId}`);
        const downloadLink = document.getElementById(`download-link-${trackId}`);
        
        // Si ya est√° visible, solo lo ocultamos
        if (audioControls.style.display === 'block') {
            audioControls.style.display = 'none';
            audioPlayer.pause();
            buttonElement.textContent = 'Descargar y Escuchar';
            return;
        }
        
        // Mostrar mensaje de carga
        buttonElement.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Cargando...';
        
        try {
            // Obtener los datos de la canci√≥n
            const trackData = await getUrlMuica(trackId);

            console.log("Track Data:", trackData);

            // Configurar el reproductor de audio
            audioPlayer.src = trackData.UrlMusica;
            downloadLink.href = trackData.UrlDescarga;
            downloadLink.download = `${trackData.Title}.mp3`;
            
            // Mostrar controles
            audioControls.style.display = 'block';
            buttonElement.textContent = 'Ocultar Reproductor';
            
            // Reproducir autom√°ticamente (opcional)
            audioPlayer.play().catch(e => console.log("Autoplay prevented:", e));
        } catch (error) {
            console.error("Error al cargar la canci√≥n:", error);
            buttonElement.textContent = 'Error - Intentar de nuevo';
            
            // Mostrar mensaje de error en la card
            const errorElement = document.createElement('div');
            errorElement.className = 'alert alert-danger mt-2';
            errorElement.textContent = 'Error al cargar la canci√≥n. Intenta de nuevo.';
            audioControls.innerHTML = '';
            audioControls.appendChild(errorElement);
            audioControls.style.display = 'block';
        }
    }
    </script>
    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const logoutLink = document.getElementById('logout-link');

        if (logoutLink) {
            logoutLink.addEventListener('click', function (e) {
                e.preventDefault();

                Swal.fire({
                    title: 'Are you sure?',
                    text: "You will be signed out from the application.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, sign me out',
                    background: '#1a1a1a',
                    color: '#f1f1f1',
                    customClass: {
                        popup: 'rounded-4 shadow-lg',
                        confirmButton: 'btn btn-danger',
                        cancelButton: 'btn btn-secondary me-3'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/Account/Logout';
                    }
                });
            });
        }
    });
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>